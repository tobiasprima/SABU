// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/restaurant.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RestaurantService_PrepareRestaurant_FullMethodName  = "/restaurant.RestaurantService/PrepareRestaurant"
	RestaurantService_CommitRestaurant_FullMethodName   = "/restaurant.RestaurantService/CommitRestaurant"
	RestaurantService_RollbackRestaurant_FullMethodName = "/restaurant.RestaurantService/RollbackRestaurant"
)

// RestaurantServiceClient is the client API for RestaurantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RestaurantServiceClient interface {
	PrepareRestaurant(ctx context.Context, in *PrepareRestaurantRequest, opts ...grpc.CallOption) (*PrepareRestaurantResponse, error)
	CommitRestaurant(ctx context.Context, in *CommitRestaurantRequest, opts ...grpc.CallOption) (*CommitRestaurantResponse, error)
	RollbackRestaurant(ctx context.Context, in *RollbackRestaurantRequest, opts ...grpc.CallOption) (*RollbackRestaurantResponse, error)
}

type restaurantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRestaurantServiceClient(cc grpc.ClientConnInterface) RestaurantServiceClient {
	return &restaurantServiceClient{cc}
}

func (c *restaurantServiceClient) PrepareRestaurant(ctx context.Context, in *PrepareRestaurantRequest, opts ...grpc.CallOption) (*PrepareRestaurantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareRestaurantResponse)
	err := c.cc.Invoke(ctx, RestaurantService_PrepareRestaurant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) CommitRestaurant(ctx context.Context, in *CommitRestaurantRequest, opts ...grpc.CallOption) (*CommitRestaurantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitRestaurantResponse)
	err := c.cc.Invoke(ctx, RestaurantService_CommitRestaurant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) RollbackRestaurant(ctx context.Context, in *RollbackRestaurantRequest, opts ...grpc.CallOption) (*RollbackRestaurantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollbackRestaurantResponse)
	err := c.cc.Invoke(ctx, RestaurantService_RollbackRestaurant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestaurantServiceServer is the server API for RestaurantService service.
// All implementations must embed UnimplementedRestaurantServiceServer
// for forward compatibility.
type RestaurantServiceServer interface {
	PrepareRestaurant(context.Context, *PrepareRestaurantRequest) (*PrepareRestaurantResponse, error)
	CommitRestaurant(context.Context, *CommitRestaurantRequest) (*CommitRestaurantResponse, error)
	RollbackRestaurant(context.Context, *RollbackRestaurantRequest) (*RollbackRestaurantResponse, error)
	mustEmbedUnimplementedRestaurantServiceServer()
}

// UnimplementedRestaurantServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRestaurantServiceServer struct{}

func (UnimplementedRestaurantServiceServer) PrepareRestaurant(context.Context, *PrepareRestaurantRequest) (*PrepareRestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareRestaurant not implemented")
}
func (UnimplementedRestaurantServiceServer) CommitRestaurant(context.Context, *CommitRestaurantRequest) (*CommitRestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitRestaurant not implemented")
}
func (UnimplementedRestaurantServiceServer) RollbackRestaurant(context.Context, *RollbackRestaurantRequest) (*RollbackRestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackRestaurant not implemented")
}
func (UnimplementedRestaurantServiceServer) mustEmbedUnimplementedRestaurantServiceServer() {}
func (UnimplementedRestaurantServiceServer) testEmbeddedByValue()                           {}

// UnsafeRestaurantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestaurantServiceServer will
// result in compilation errors.
type UnsafeRestaurantServiceServer interface {
	mustEmbedUnimplementedRestaurantServiceServer()
}

func RegisterRestaurantServiceServer(s grpc.ServiceRegistrar, srv RestaurantServiceServer) {
	// If the following call pancis, it indicates UnimplementedRestaurantServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RestaurantService_ServiceDesc, srv)
}

func _RestaurantService_PrepareRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).PrepareRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_PrepareRestaurant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).PrepareRestaurant(ctx, req.(*PrepareRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_CommitRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).CommitRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_CommitRestaurant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).CommitRestaurant(ctx, req.(*CommitRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_RollbackRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).RollbackRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_RollbackRestaurant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).RollbackRestaurant(ctx, req.(*RollbackRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RestaurantService_ServiceDesc is the grpc.ServiceDesc for RestaurantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RestaurantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "restaurant.RestaurantService",
	HandlerType: (*RestaurantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareRestaurant",
			Handler:    _RestaurantService_PrepareRestaurant_Handler,
		},
		{
			MethodName: "CommitRestaurant",
			Handler:    _RestaurantService_CommitRestaurant_Handler,
		},
		{
			MethodName: "RollbackRestaurant",
			Handler:    _RestaurantService_RollbackRestaurant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/restaurant.proto",
}
