// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: proto/foundation.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FoundationService_PrepareFoundation_FullMethodName  = "/foundation.FoundationService/PrepareFoundation"
	FoundationService_CommitFoundation_FullMethodName   = "/foundation.FoundationService/CommitFoundation"
	FoundationService_RollbackFoundation_FullMethodName = "/foundation.FoundationService/RollbackFoundation"
)

// FoundationServiceClient is the client API for FoundationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FoundationServiceClient interface {
	PrepareFoundation(ctx context.Context, in *PrepareFoundationRequest, opts ...grpc.CallOption) (*PrepareFoundationResponse, error)
	CommitFoundation(ctx context.Context, in *CommitFoundationRequest, opts ...grpc.CallOption) (*CommitFoundationResponse, error)
	RollbackFoundation(ctx context.Context, in *RollbackFoundationRequest, opts ...grpc.CallOption) (*RollbackFoundationResponse, error)
}

type foundationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFoundationServiceClient(cc grpc.ClientConnInterface) FoundationServiceClient {
	return &foundationServiceClient{cc}
}

func (c *foundationServiceClient) PrepareFoundation(ctx context.Context, in *PrepareFoundationRequest, opts ...grpc.CallOption) (*PrepareFoundationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareFoundationResponse)
	err := c.cc.Invoke(ctx, FoundationService_PrepareFoundation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foundationServiceClient) CommitFoundation(ctx context.Context, in *CommitFoundationRequest, opts ...grpc.CallOption) (*CommitFoundationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitFoundationResponse)
	err := c.cc.Invoke(ctx, FoundationService_CommitFoundation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foundationServiceClient) RollbackFoundation(ctx context.Context, in *RollbackFoundationRequest, opts ...grpc.CallOption) (*RollbackFoundationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollbackFoundationResponse)
	err := c.cc.Invoke(ctx, FoundationService_RollbackFoundation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FoundationServiceServer is the server API for FoundationService service.
// All implementations must embed UnimplementedFoundationServiceServer
// for forward compatibility.
type FoundationServiceServer interface {
	PrepareFoundation(context.Context, *PrepareFoundationRequest) (*PrepareFoundationResponse, error)
	CommitFoundation(context.Context, *CommitFoundationRequest) (*CommitFoundationResponse, error)
	RollbackFoundation(context.Context, *RollbackFoundationRequest) (*RollbackFoundationResponse, error)
	mustEmbedUnimplementedFoundationServiceServer()
}

// UnimplementedFoundationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFoundationServiceServer struct{}

func (UnimplementedFoundationServiceServer) PrepareFoundation(context.Context, *PrepareFoundationRequest) (*PrepareFoundationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareFoundation not implemented")
}
func (UnimplementedFoundationServiceServer) CommitFoundation(context.Context, *CommitFoundationRequest) (*CommitFoundationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitFoundation not implemented")
}
func (UnimplementedFoundationServiceServer) RollbackFoundation(context.Context, *RollbackFoundationRequest) (*RollbackFoundationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackFoundation not implemented")
}
func (UnimplementedFoundationServiceServer) mustEmbedUnimplementedFoundationServiceServer() {}
func (UnimplementedFoundationServiceServer) testEmbeddedByValue()                           {}

// UnsafeFoundationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FoundationServiceServer will
// result in compilation errors.
type UnsafeFoundationServiceServer interface {
	mustEmbedUnimplementedFoundationServiceServer()
}

func RegisterFoundationServiceServer(s grpc.ServiceRegistrar, srv FoundationServiceServer) {
	// If the following call pancis, it indicates UnimplementedFoundationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FoundationService_ServiceDesc, srv)
}

func _FoundationService_PrepareFoundation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareFoundationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoundationServiceServer).PrepareFoundation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoundationService_PrepareFoundation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoundationServiceServer).PrepareFoundation(ctx, req.(*PrepareFoundationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoundationService_CommitFoundation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitFoundationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoundationServiceServer).CommitFoundation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoundationService_CommitFoundation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoundationServiceServer).CommitFoundation(ctx, req.(*CommitFoundationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoundationService_RollbackFoundation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackFoundationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoundationServiceServer).RollbackFoundation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoundationService_RollbackFoundation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoundationServiceServer).RollbackFoundation(ctx, req.(*RollbackFoundationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FoundationService_ServiceDesc is the grpc.ServiceDesc for FoundationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FoundationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "foundation.FoundationService",
	HandlerType: (*FoundationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareFoundation",
			Handler:    _FoundationService_PrepareFoundation_Handler,
		},
		{
			MethodName: "CommitFoundation",
			Handler:    _FoundationService_CommitFoundation_Handler,
		},
		{
			MethodName: "RollbackFoundation",
			Handler:    _FoundationService_RollbackFoundation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/foundation.proto",
}
